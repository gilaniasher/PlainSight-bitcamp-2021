# -*- coding: utf-8 -*-
"""WikipediaAndSummaryAPI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qF3phVnyeIxlqtE7SOSgWndNARh9vSx7

Wikipedia library example
"""

import requests
import typing

session = requests.Session()

# text,         type:str    - Content wanting to be summarized.

# Note: Error occurs when text is too short.
def summary(text:str)-> dict:
  API_KEY = "*******"
  url = "https://api.smmry.com"
  
  data = {"sm_api_input":text}
  params = {"SM_API_KEY":API_KEY}
  header_params = {"Expect":"100-continue"}

  res = session.post(url=url, params=params, data=data, headers=header_params).json()
  try:
    return {'status':200, 'message':res['sm_api_content']}
  except Exception:
    return {'status':500, 'message':res['sm_api_message']}

# name,         type:str  - First and last name of a given actor
# num_sentence, type:int  - Number of sentences returned for wikipedia api

# Note: num_sentence should range between 4-10
def search_wiki(name:str, num_sentence:int=10) -> dict:
  url = "https://en.wikipedia.org/w/api.php?&exintro&explaintext&indexpageids"
  params = {
    "action":"query",
    "format":"json",
    "titles":name,
    "exsentences":num_sentence,
    "prop":"extracts|info",
    "redirects":1,
    "inprop":"url"
  }
  res = session.get(url=url, params=params).json()
  try:
    # Return dictionary of responses
    pageid = res['query']['pageids'][0]
    content = str(res['query']['pages'][str(pageid)]['extract'])
    sum = summary(text=content)
    return {'status':200, 
            'response':{
                'source':res['query']['pages'][str(pageid)]['fullurl'],
                'title':res['query']['pages'][str(pageid)]['title'],
                'summary':sum['message'] if sum['status'] is 200 else content
                }
            }
  except KeyError:
    # Person not found
    return {'error':404, 'message':f'Could not find \"{name}\".'}
  except Exception as e:
    # Generic Exception
    return {'error':500, 'message':f"Error processing request.{e}"}

"""Note, the above function does not work when name is misspelled. For our implementation, we will not worry about misspell since data will be read from classifier."""

name = "bob marley"
response = search_wiki(name)
print(response)